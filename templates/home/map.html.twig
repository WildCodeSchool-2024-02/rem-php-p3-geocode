{%  extends 'base.html.twig' %}

{% block javascripts %}
    {% block importmap %}{{ importmap('map') }}{% endblock %}
{% endblock %}

{% block body %}
    <main class="map-main">
        <section class="map-screen">
            <div id="map"></div>

            <!--
              The `defer` attribute causes the script to execute after the full HTML
              document has been parsed. For non-blocking uses, avoiding race conditions,
              and consistent behavior across browsers, consider loading using Promises. See
              https://developers.google.com/maps/documentation/javascript/load-maps-js-api
              for more information.
              -->
            <script src='/assets/map.js'></script>
            <script
                src="https://maps.googleapis.com/maps/api/js?key=AIzaSyCsCbly8V_UsYc2E8ebpocsVe1JAHFgF6U&callback=initMap&v=weekly"
            ></script>
            <script src="https://unpkg.com/@googlemaps/markerclusterer/dist/index.min.js"></script>
            <script src="https://polyfill.io/v3/polyfill.min.js?features=default"></script>

            <script>
                window.initMap;

                const directionsService = new google.maps.DirectionsService();
                const directionsRenderer = new google.maps.DirectionsRenderer();
                const stations = {{ stations | raw }};
                const clientInfo = {{ clientInfo | raw }};
                const stationMark = "./../../assets/icons/greenmark.png";
                const icon = {
                    url: 'https://image.noelshack.com/fichiers/2024/25/4/1718884782-whitemark.png', // url
                    scaledSize: new google.maps.Size(75, 75), // size
                };
                const myLatLng = { lat: clientInfo.lat, lng: clientInfo.lon };
                const map = new google.maps.Map(document.getElementById("map"), {
                    zoom: 17,
                    center: myLatLng,
                });

                directionsRenderer.setMap(map);
                function calcRoute(directionsService, directionsRenderer, property)
                {

                    var start = new google.maps.LatLng(clientInfo.lat, clientInfo.lon);
                    var end = new google.maps.LatLng(property.coords.lat, property.coords.lng);

                    var request = {
                        origin : start,
                        destination : end,
                        travelMode : 'DRIVING'
                    };
                    directionsService.route(request, function (response, status) {
                        if (status === 'OK') {
                            directionsRenderer.setDirections(response);
                        }
                    });

                    return end;
                }

                function deleteRoute(directionsService, directionsRenderer)
                {
                    directionsRenderer.set('directions', null);
                }

                let infoWindow = new google.maps.InfoWindow({
                    content: '<h3>Borne rechargeable</h3>' +
                        '<button class="markr-btn">Delete me !</button>'
                });

                function addMarker(property)
                {
                    let marker = new google.maps.Marker({
                        position: property.coords,
                        map: map,
                        icon: icon,
                        title: "Hello World!",
                    });

                    let infoWindow2 = new google.maps.InfoWindow({
                        content: '<h3>Borne rechargeable</h3>' +
                            '<button class="markr-btn">Delete me !</button>'
                    });

                    let contentString = "<div class='infowindow-container'>"+
                        "<h4>"+ property.name +"</h4>" +
                        "<button id=infowindow-btn-"+ property.inseecode + ">Choisir cette borne</button>"+
                        "<button id=delete-btn-"+ property.inseecode + ">Supprimer l\'itinéraire</button>"+
                        "</div>";

                    marker.addListener('click', function () {
                        infoWindow2.setContent(contentString);
                        infoWindow2.open(map, marker);
                    })

                    google.maps.event.addListener(infoWindow2, 'domready', function() {
                        document.getElementById(`infowindow-btn-${property.inseecode}`).addEventListener("click", function() {
                            calcRoute(directionsService, directionsRenderer, property)
                            });
                        document.getElementById(`delete-btn-${property.inseecode}`).addEventListener("click", function() {
                            deleteRoute(directionsService, directionsRenderer);
                        });
                    });

                    return marker;
                }

                let userMarker = new google.maps.Marker({
                    position: myLatLng,
                    map: map,
                    title: "Vous êtes ici !",
                });
                userMarker.addListener('click', function () {
                    infoWindow.setContent('<h1>Vous êtes ici!</h1>');
                    infoWindow.open(map, userMarker);
                    console.log(clientInfo);
                })


                const markers = [];

                for (let i = 0; i < stations.length; i++) {
                    markers.push(addMarker({coords:{lat:stations[i].latitude, lng:stations[i].longitude}, name:stations[i].stationName, inseecode:stations[i].inseeCode}));
                }
                const markerCluster = new markerClusterer.MarkerClusterer({ markers, map });


            </script>
            <div class="map-widget">
                <img src="E:\WCC\wild-git\projet-3\assets\icons\greenmark.png" alt="">
                {% include '/_includes/_footer-navbar.html.twig' %}
            </div>
        </section>

    </main>
{% endblock %}
